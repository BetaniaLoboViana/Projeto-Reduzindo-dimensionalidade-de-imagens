# -*- coding: utf-8 -*-
"""Reduzir dimensionalidade em imagens Desafio DIO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g5v8axjfGsdwBmZ-De5iHJCYXIWA39_n
"""

from PIL import Image
import matplotlib.pyplot as plt
import numpy as np

# Carregar a imagem colorida
image_path = 'TomateMaduro5.jpg'  #caminho da imagem usada
image = Image.open(image_path)

# 1. Transformação para níveis de cinza
def rgb_to_gray(rgb):
    r, g, b = rgb
    # Usando a fórmula de luminância para converter para níveis de cinza
    return int(0.2989 * r + 0.5870 * g + 0.1140 * b)

# Aplicando a conversão para níveis de cinza
gray_image = image.convert('RGB')
gray_pixels = np.array(gray_image)
gray_image_array = np.apply_along_axis(lambda x: rgb_to_gray(x), 2, gray_pixels)

# 2. Transformação para imagem binarizada (preto e branco)
def rgb_to_binary(gray_value, threshold=127):
    return 255 if gray_value > threshold else 0

binary_image_array = np.vectorize(rgb_to_binary)(gray_image_array)

# Convertendo para imagens do tipo PIL para visualização
gray_image_pil = Image.fromarray(gray_image_array.astype('uint8'))
binary_image_pil = Image.fromarray(binary_image_array.astype('uint8'))

# Exibir as imagens utilizando Matplotlib
plt.figure(figsize=(12, 4))

# Exibir a imagem original
plt.subplot(1, 3, 1)
plt.imshow(image)
plt.title("Imagem Original")
plt.axis('off')

# Exibir a imagem em níveis de cinza
plt.subplot(1, 3, 2)
plt.imshow(gray_image_pil, cmap='gray')
plt.title("Imagem em Níveis de Cinza")
plt.axis('off')

# Exibir a imagem binarizada
plt.subplot(1, 3, 3)
plt.imshow(binary_image_pil, cmap='gray')
plt.title("Imagem Binarizada")
plt.axis('off')

# Mostrar todas as imagens
plt.tight_layout()
plt.show()